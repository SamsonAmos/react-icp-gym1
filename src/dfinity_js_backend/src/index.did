service: () -> {
    addGymService: (record {operatingDaysEnd:text; serviceName:text; serviceDescription:text; gymId:text; operatingDaysStart:text}) -> (variant {Ok:record {id:text; gymName:text; members:vec record {userName:text; userId:text; fullName:text; gymId:text; emailAddress:text}; owner:principal; gymLocation:text; gymServices:vec record {operatingDaysEnd:text; serviceName:text; serviceDescription:text; gymId:text; operatingDaysStart:text}; gymDescription:text; emailAddress:text; gymImgUrl:text}; Err:variant {PaymentFailed:text; AlreadyExist:text; InvalidPayload:text; NotFound:text; NotAuthorized:text; PaymentCompleted:text}});
    createGymProfile: (record {gymName:text; gymLocation:text; gymDescription:text; emailAddress:text; gymImgUrl:text}) -> (variant {Ok:record {id:text; gymName:text; members:vec record {userName:text; userId:text; fullName:text; gymId:text; emailAddress:text}; owner:principal; gymLocation:text; gymServices:vec record {operatingDaysEnd:text; serviceName:text; serviceDescription:text; gymId:text; operatingDaysStart:text}; gymDescription:text; emailAddress:text; gymImgUrl:text}; Err:variant {PaymentFailed:text; AlreadyExist:text; InvalidPayload:text; NotFound:text; NotAuthorized:text; PaymentCompleted:text}});
    deleteGymById: (text) -> (variant {Ok:text; Err:variant {PaymentFailed:text; AlreadyExist:text; InvalidPayload:text; NotFound:text; NotAuthorized:text; PaymentCompleted:text}});
    getAddressFromPrincipal: (principal) -> (text) query;
    getAllEnrollesByGymId: (text) -> (variant {Ok:vec record {userName:text; userId:text; fullName:text; gymId:text; emailAddress:text}; Err:variant {PaymentFailed:text; AlreadyExist:text; InvalidPayload:text; NotFound:text; NotAuthorized:text; PaymentCompleted:text}}) query;
    getAllGym: () -> (vec record {id:text; gymName:text; members:vec record {userName:text; userId:text; fullName:text; gymId:text; emailAddress:text}; owner:principal; gymLocation:text; gymServices:vec record {operatingDaysEnd:text; serviceName:text; serviceDescription:text; gymId:text; operatingDaysStart:text}; gymDescription:text; emailAddress:text; gymImgUrl:text}) query;
    getAllServicesById: (text) -> (variant {Ok:vec record {operatingDaysEnd:text; serviceName:text; serviceDescription:text; gymId:text; operatingDaysStart:text}; Err:variant {PaymentFailed:text; AlreadyExist:text; InvalidPayload:text; NotFound:text; NotAuthorized:text; PaymentCompleted:text}}) query;
    getGymById: (text) -> (variant {Ok:record {id:text; gymName:text; members:vec record {userName:text; userId:text; fullName:text; gymId:text; emailAddress:text}; owner:principal; gymLocation:text; gymServices:vec record {operatingDaysEnd:text; serviceName:text; serviceDescription:text; gymId:text; operatingDaysStart:text}; gymDescription:text; emailAddress:text; gymImgUrl:text}; Err:variant {PaymentFailed:text; AlreadyExist:text; InvalidPayload:text; NotFound:text; NotAuthorized:text; PaymentCompleted:text}}) query;
    gymMembershipRegistration: (record {userName:text; userId:text; fullName:text; gymId:text; emailAddress:text}) -> (variant {Ok:record {id:text; gymName:text; members:vec record {userName:text; userId:text; fullName:text; gymId:text; emailAddress:text}; owner:principal; gymLocation:text; gymServices:vec record {operatingDaysEnd:text; serviceName:text; serviceDescription:text; gymId:text; operatingDaysStart:text}; gymDescription:text; emailAddress:text; gymImgUrl:text}; Err:variant {PaymentFailed:text; AlreadyExist:text; InvalidPayload:text; NotFound:text; NotAuthorized:text; PaymentCompleted:text}});
    makePayment: (text, nat64) -> (variant {Ok:variant {PaymentFailed:text; AlreadyExist:text; InvalidPayload:text; NotFound:text; NotAuthorized:text; PaymentCompleted:text}; Err:variant {PaymentFailed:text; AlreadyExist:text; InvalidPayload:text; NotFound:text; NotAuthorized:text; PaymentCompleted:text}});
    updateGymById: (text, record {gymName:text; gymLocation:text; gymDescription:text; emailAddress:text; gymImgUrl:text}) -> (variant {Ok:record {id:text; gymName:text; members:vec record {userName:text; userId:text; fullName:text; gymId:text; emailAddress:text}; owner:principal; gymLocation:text; gymServices:vec record {operatingDaysEnd:text; serviceName:text; serviceDescription:text; gymId:text; operatingDaysStart:text}; gymDescription:text; emailAddress:text; gymImgUrl:text}; Err:variant {PaymentFailed:text; AlreadyExist:text; InvalidPayload:text; NotFound:text; NotAuthorized:text; PaymentCompleted:text}});
    deleteGymMember: (text, text) -> (variant { Ok: Gym; Err: Message });
    verifyPayment: (principal, nat64, nat64, nat64) -> (bool) query;
}
